--- GENERATED CODE - DO NOT MODIFY
-- {{metadata.serviceFullName}} ({{metadata.uid}})

local M = {}

M.metadata = {
	api_version = "{{metadata.apiVersion}}",
	json_version = "{{metadata.jsonVersion}}",
	protocol = "{{metadata.protocol}}",
	checksum_format = "{{metadata.checksumFormat}}",
	endpoint_prefix = "{{metadata.endpointPrefix}}",
	service_abbreviation = "{{metadata.serviceAbbreviation}}",
	service_full_name = "{{metadata.serviceFullName}}",
	signature_version = "{{metadata.signatureVersion}}",
	target_prefix = "{{metadata.targetPrefix}}",
	timestamp_format = "{{metadata.timestampFormat}}",
	global_endpoint = "{{metadata.globalEndpoint}}",
	uid = "{{metadata.uid}}",
}

{{#shapes.structure}}
local {{name}}_keys = { {{#members}}"{{name}}" = true, {{/members}}nil }

function M.Assert{{name}}(struct)
	assert(struct)
	assert(type(struct) == "table", "Expected {{name}} to be of type 'table'"){{#required}}
	assert(struct["{{name}}"], "Expected key {{name}} to exist in table"){{/required}}{{#members}}
	if struct["{{name}}"] then M.Assert{{shape}}(struct["{{name}}"]) end{{/members}}
	for k,_ in pairs(struct) do
		assert({{name}}_keys[k], "{{name}} contains unknown key " .. tostring(k))
	end
end

--- Create a structure of type {{name}}
{{#documentation}}-- {{documentation}}{{/documentation}}
{{#members}}-- @param {{name}} [{{shape}}] {{documentation}}
{{/members}}{{#required}}-- Required parameter: {{name}}
{{/required}}
function M.{{name}}({{#members}}{{name}}, {{/members}}...)
	assert(select("#", ...) == 0, "Too many arguments when creating {{name}}")
	local t = { {{#members}}
		["{{name}}"] = {{name}},{{/members}}
	}
	M.Assert{{name}}(t)
	return t
end

{{/shapes.structure}}
{{#shapes.string}}
function M.Assert{{name}}(str)
	assert(str)
	assert(type(str) == "string", "Expected {{name}} to be of type 'string'"){{#max}}
	assert(#str <= {{max}}, "Expected string to be max {{max}} characters"){{/max}}{{#min}}
	assert(#str >= {{min}}, "Expected string to be min {{min}} characters"){{/min}}{{#pattern}}
	assert(str:match("{{pattern}}"), "Expected string to match pattern '{{pattern}}'"){{/pattern}}
end

{{#documentation}}-- {{documentation}}{{/documentation}}
function M.{{name}}(str)
	M.Assert{{name}}(str)
	return str
end

{{/shapes.string}}
{{#shapes.float}}
function M.Assert{{name}}(float)
	assert(float)
	assert(type(float) == "number", "Expected {{name}} to be of type 'number'")
end

function M.{{name}}(float)
	M.Assert{{name}}(float)
	return float
end

{{/shapes.float}}
{{#shapes.double}}
function M.Assert{{name}}(double)
	assert(double)
	assert(type(double) == "number", "Expected {{name}} to be of type 'number'")
end

function M.{{name}}(double)
	M.Assert{{name}}(double)
	return double
end

{{/shapes.double}}
{{#shapes.long}}
function M.Assert{{name}}(long)
	assert(long)
	assert(type(long) == "number", "Expected {{name}} to be of type 'number'")
	assert(long % 1 == 0, "Expected a whole integer number")
end

function M.{{name}}(long)
	M.Assert{{name}}(long)
	return long
end

{{/shapes.long}}
{{#shapes.integer}}
function M.Assert{{name}}(integer)
	assert(integer)
	assert(type(integer) == "number", "Expected {{name}} to be of type 'number'")
	assert(integer % 1 == 0, "Expected a while integer number"){{#max}}
	assert(integer <= {{max}}, "Expected integer to be max {{max}}"){{/max}}{{#min}}
	assert(integer >= {{min}}, "Expected integer to be min {{min}}"){{/min}}
end

function M.{{name}}(integer)
	M.Assert{{name}}(integer)
	return integer
end

{{/shapes.integer}}
{{#shapes.boolean}}
function M.Assert{{name}}(boolean)
	assert(boolean)
	assert(type(boolean) == "boolean", "Expected {{name}} to be of type 'boolean'")
end

function M.{{name}}(boolean)
	M.Assert{{name}}(boolean)
	return boolean
end

{{/shapes.boolean}}
{{#shapes.map}}
function M.Assert{{name}}(map)
	assert(map)
	assert(type(map) == "table", "Expected {{name}} to be of type 'table'")
	for k,v in pairs(map) do
		M.Assert{{key.shape}}(k)
		M.Assert{{value.shape}}(v)
	end
end

function M.{{name}}(map)
	M.Assert{{name}}(map)
	return map
end

{{/shapes.map}}
{{#shapes.timestamp}}
function M.Assert{{name}}(timestamp)
	assert(timestamp)
	assert(type(timestamp) == "string", "Expected {{name}} to be of type 'string'")
end

function M.{{name}}(timestamp)
	M.Assert{{name}}(timestamp)
	return timestamp
end

{{/shapes.timestamp}}
{{#shapes.blob}}
function M.Assert{{name}}(blob)
	assert(blob)
	assert(type(string) == "string", "Expected {{name}} to be of type 'string'"){{#max}}
	assert(#blob <= {{max}}, "Expected blob to be max {{max}}"){{/max}}{{#min}}
	assert(#blob >= {{min}}, "Expected blob to be max {{min}}"){{/min}}
end

function M.{{name}}(blob)
	M.Assert{{name}}(blob)
	return blob
end

{{/shapes.blob}}
{{#shapes.list}}
function M.Assert{{name}}(list)
	assert(list)
	assert(type(list) == "table", "Expected {{name}} to be of type ''table"){{#max}}
	assert(#list <= {{max}}, "Expected list to be contain {{max}} elements"){{/max}}{{#min}}
	assert(#list >= {{min}}, "Expected list to be contain {{min}} elements"){{/min}}
	for _,v in ipairs(list) do
		M.Assert{{member.shape}}(v)
	end
end

{{#documentation}}-- {{documentation}}{{/documentation}}
-- List of {{member.shape}} objects
function M.{{name}}(list)
	M.Assert{{name}}(list)
	return list
end

{{/shapes.list}}

local headers = require "aws-sdk.core.headers"
local content_type = require "aws-sdk.core.content_type"
local scheme_mapper = require "aws-sdk.core.scheme_mapper"
local request_handlers = require "aws-sdk.core.request_handlers"

local uri = ""


local function endpoint_for_region(region, use_dualstack)
	if not use_dualstack then
		if region == "us-east-1" then
			return "{{metadata.endpointPrefix}}.amazonaws.com"
		end
	end
	local ss = { "{{metadata.endpointPrefix}}" }
	if use_dualstack then
		ss[#ss + 1] = "dualstack"
	end
	ss[#ss + 1] = region
	ss[#ss + 1] = "amazonaws.com"
	if region == "cn-north-1" then
		ss[#ss + 1] = "cn"
	end
	return table.concat(ss, ".")
end


function M.init(config)
	assert(config, "You must provide a config table")
	uri = scheme_mapper.from_string(config.scheme) .. "://"
	uri = uri .. config.endpoint_override or endpoint_for_region(config.region, config.use_dualstack)
end


--
-- OPERATIONS
--
{{#operations}}
--- {{name}}
-- @param {{input.shape}}
-- @param cb Callback function accepting two args: response, error_message
function M.{{name}}Async({{input.shape}}, cb)
	assert({{input.shape}}, "You must provide a {{input.shape}}")
	local headers = {
		[headers.CONTENT_TYPE_HEADER] = content_type.from_protocol(M.metadata.protocol, M.metadata.json_version),
		[headers.AMZ_TARGET_HEADER] = "{{metadata.targetPrefix}}.{{name}}",
	}

	local request_handler, err = request_handlers.from_http_method("{{http.method}}")
	if request_handler then
		request_handler(uri .. "{{http.requestUri}}", {{input.shape}}, headers, M.metadata, cb)
	else
		cb(false, err)
	end
end

{{/operations}}

return M
